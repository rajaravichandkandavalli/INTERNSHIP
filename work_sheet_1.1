{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7ccf373c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Which of the following operators is used to calculate remainder in a division"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ff2e31cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "  19%3      # c) % ,    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dd8b6ff7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. In Python 2//3 is equal to"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "feb2b1bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2//3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7afd7810",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3. In Python, 6<<2 is equal to?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "829f0ae5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "6<<2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1028a17a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4. In Python ,6 & 2 will give which of the following output?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f969f80d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "6&2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5048e745",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5. In Python 6/2 will give which of the following as output?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9aeadb1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "6|2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "13eeddcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 6.What does the finally keyword denotes in Python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c350e5b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# c) the finally block will be executed no matter if the try block raises an error or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "652c8fd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 7.What does raise keyword is used in Python?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0abfc1e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# A)It used to raise an exception"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cda36db1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 8.Which of the following is a common use case of yield keyword in python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0f8d6eba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# A) in defining an iterator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "16e8fd89",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 9. Which of the following are the valid variable names?\n",
    "\n",
    "# a) _abc c)abc2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "90805293",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 10. Which of the following are the keywords in python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6885eb02",
   "metadata": {},
   "outputs": [],
   "source": [
    "# D) all the above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9ca6b95b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 23\n",
      "The factorial of 23 is 25852016738884976640000\n"
     ]
    }
   ],
   "source": [
    "# 11. Python program to find the factorial of a number provided by the user.\n",
    "\n",
    "# change the value for a different result\n",
    "num = 7\n",
    "\n",
    "# To take input from the user\n",
    "num = int(input(\"Enter a number: \"))\n",
    "\n",
    "factorial = 1\n",
    "\n",
    "# check if the number is negative, positive or zero\n",
    "if num < 0:\n",
    "   print(\"Sorry, factorial does not exist for negative numbers\")\n",
    "elif num == 0:\n",
    "   print(\"The factorial of 0 is 1\")\n",
    "else:\n",
    "   for i in range(1,num + 1):\n",
    "       factorial = factorial*i\n",
    "   print(\"The factorial of\",num,\"is\",factorial)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d9b71a43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number: 89\n",
      "89 is a prime number\n"
     ]
    }
   ],
   "source": [
    "# 12.# Program to check if a number is prime or not\n",
    "\n",
    "num = 29\n",
    "\n",
    "# To take input from the user\n",
    "num = int(input(\"Enter a number: \"))\n",
    "\n",
    "# define a flag variable\n",
    "flag = False\n",
    "\n",
    "# prime numbers are greater than 1\n",
    "if num > 1:\n",
    "    # check for factors\n",
    "    for i in range(2, num):\n",
    "        if (num % i) == 0:\n",
    "            # if factor is found, set flag to True\n",
    "            flag = True\n",
    "            # break out of loop\n",
    "            break\n",
    "\n",
    "# check if flag is True\n",
    "if flag:\n",
    "    print(num, \"is not a prime number\")\n",
    "else:\n",
    "    print(num, \"is a prime number\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "928abb44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number:45\n",
      "The number isn't a palindrome!\n"
     ]
    }
   ],
   "source": [
    "# 13.\n",
    "n=int(input(\"Enter number:\"))\n",
    "temp=n\n",
    "rev=0\n",
    "while(n>0):\n",
    "    dig=n%10\n",
    "    rev=rev*10+dig\n",
    "    n=n//10\n",
    "if(temp==rev):\n",
    "    print(\"The number is a palindrome!\")\n",
    "else:\n",
    "    print(\"The number isn't a palindrome!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0ca00b17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hypotenuse = 5.0\n",
      "Adjacent = 4.0\n",
      "Opposite = 3.0\n",
      "You know the answer!\n"
     ]
    }
   ],
   "source": [
    "def pythagoras(opposite_side,adjacent_side,hypotenuse):\n",
    "        if opposite_side == str(\"x\"):\n",
    "            return (\"Opposite = \" + str(((hypotenuse**2) - (adjacent_side**2))**0.5))\n",
    "        elif adjacent_side == str(\"x\"):\n",
    "            return (\"Adjacent = \" + str(((hypotenuse**2) - (opposite_side**2))**0.5))\n",
    "        elif hypotenuse == str(\"x\"):\n",
    "            return (\"Hypotenuse = \" + str(((opposite_side**2) + (adjacent_side**2))**0.5))\n",
    "        else:\n",
    "            return \"You know the answer!\"\n",
    "    \n",
    "print(pythagoras(3,4,'x'))\n",
    "print(pythagoras(3,'x',5))\n",
    "print(pythagoras('x',4,5))\n",
    "print(pythagoras(3,4,5))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1193f924",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "characters in  :\n",
      " {'c': 2, 'h': 1, 'a': 2, 'r': 2, 't': 1, 'e': 1, 's': 1}\n"
     ]
    }
   ],
   "source": [
    "# Python3 code to demonstrate\n",
    "# each occurrence frequency using\n",
    "# naive method\n",
    "\n",
    "# initializing string\n",
    "test_str = \"characters\"\n",
    "\n",
    "# using naive method to get count\n",
    "# of each element in string\n",
    "all_freq = {}\n",
    "\n",
    "for i in test_str:\n",
    "\tif i in all_freq:\n",
    "\t\tall_freq[i] += 1\n",
    "\telse:\n",
    "\t\tall_freq[i] = 1\n",
    "\n",
    "# printing result\n",
    "print (\"characters in  :\\n \"\n",
    "\t\t\t\t\t\t\t\t\t\t+ str(all_freq))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7874205",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
